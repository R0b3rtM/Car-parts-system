package Main_pkg;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;

import com.fasterxml.jackson.databind.ObjectMapper;

public class FilesHandler {
	
	private Configurations curr_configs;
	private ObjectMapper mapper;
	private File conf_file;
	
	private List<Part> parts;
	
	public FilesHandler(){
		this.curr_configs = new Configurations();
		this.mapper = new ObjectMapper();
		
		this.parts = new ArrayList<>();
	}
	
	public void setDataFile(String new_url) {
		curr_configs.setDataFile(new_url);
		save_configs();
	}
	
	public void findPart(String cn) {
		
	}
	
	public void conf_initiation() {
		
		if(!Files.exists(Paths.get(Constants.def_conf_file))) {
			//Create new Json configuration file 
			conf_file = new File(Constants.def_conf_file);
			//Set the default config file
			curr_configs.setFile(conf_file);
			save_configs();
			
		}else {
			//If the file exists, copy the content to Configurations instance.
			conf_file = Paths.get(Constants.def_conf_file).toFile();
			try {
				curr_configs = mapper.readValue(conf_file, Configurations.class);
			} catch(IOException e) {
				System.out.println(e.getMessage());
			}
		}
	}
	
	public void data_file_init() {
		
		//Setting the database file url
		String db_file_name = curr_configs.getDataFile(), db_url;
		
		if(db_file_name == null) {
			db_url = "jdbc:sqlite:" + Constants.def_db_file + ".db";
			setDataFile(Constants.def_db_file);
		}else {
			db_url = "jdbc:sqlite:" + db_file_name + ".db";
		}
		//Connect to the database
		try (Connection conn = DriverManager.getConnection(db_url)){

			//Create a table in the database
			Statement stmt = conn.createStatement();
			stmt.execute("CREATE TABLE IF NOT EXISTS parts (" +
								"CN TEXT," +
								"Type TEXT," +
								"Manufacturer TEXT," +
								"Models TEXT," +
								"Year TEXT" +
								");");
				
			show_data_file(conn, stmt);
				
		} catch (SQLException e) {
			System.out.println("SQLite Error: " + e.getMessage());
		}
			
	}
	
	private void show_data_file(Connection conn, Statement stmt) {		
		int row_counts;
		
		System.out.println("===" + curr_configs.getDataFile() + "===");
		System.out.println(Constants.msg_parts);
		
		
		try (ResultSet rs = stmt.executeQuery("SELECT COUNT(*) AS total FROM parts")){
			
			if(rs.next()) {
				row_counts = rs.getInt("total");
				
				//Check if the table is empty
				if(row_counts == 0) {
					System.out.println("The database is empty");
				}else {
					//Upload parts in to parts list from the database
					while(rs.next()) {
						String cn = rs.getString("CN");
						String type = rs.getString("Type");
						String man = rs.getString("Manufacturer");
						String model = rs.getString("Model");
						String year = rs.getString("Year");
						
						parts.add(new Part(cn, type, man, model, year));
					}
					
					//Print the database content
					for(Part part : parts) {
						part.printPartData();
					}
				}
			}
			
		} catch (SQLException e) {
			System.out.println("SQLite Error: " + e.getMessage());
		}
		
		System.out.println(Constants.msg_menu_parts);
	}
	
	public void add_part_to_database(String[] part_info) {
		
		String db_url = "jdbc:sqlite:" + curr_configs.getDataFile() + ".db";
		
		try (Connection conn = DriverManager.getConnection(db_url)){
			
			PreparedStatement pstmt = conn.prepareStatement("INSERT INTO parts (CN, Type, Manufacturer, Models, Year) VALUES (?, ?, ?, ?, ?)");
			for(int i = 0; i<5; i++) {
				pstmt.setString(i+1, part_info[i]);
			}
			
		} catch (SQLException e) {
			System.out.println("SQLite Error: " + e.getMessage());
		}
	}
	
	private void save_configs() {
		try {
			mapper.writerWithDefaultPrettyPrinter().writeValue(conf_file, curr_configs);
			
		} catch(IOException e) {
			System.out.println(e.getMessage());
		}
	}
}
