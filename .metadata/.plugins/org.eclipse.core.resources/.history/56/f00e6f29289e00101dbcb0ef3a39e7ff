package Main_pkg;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import com.fasterxml.jackson.databind.ObjectMapper;

public class FilesHandler {
	
	private Configurations curr_configs;
	private ObjectMapper mapper;
	private File conf_file;
	
	private Extractor extractor = new Extractor(curr_configs, mapper);
	
	public FilesHandler() {}
	
	public FilesHandler(Configurations curr_configs, ObjectMapper mapper, File conf_file){
		this.curr_configs = curr_configs;
		this.mapper = mapper;
		this.conf_file = conf_file;
	}
	
	public void conf_initiation() {
		
		if(!Files.exists(Paths.get(Constants.def_conf_file))) {
			//Create new Json configuration file 
			conf_file = new File(Constants.def_conf_file);
			//Set the default config file
			curr_configs.setFile(conf_file);
			save_configs();
			
		}else {
			//If the file exists, copy the content to settings instance.
			conf_file = Paths.get(Constants.def_conf_file).toFile();
			try {
				curr_configs = mapper.readValue(conf_file, Configurations.class);
			} catch(IOException e) {
				System.out.println(e.getMessage());
			}
		}
	}
	
	public void data_file_init() {
		
		//Extract the data file from configurations file
		File data_file = curr_configs.getDataFile();
		
		//Create default data file if is not exist
		if(data_file == null) {
			data_file = new File(Constants.def_data_file);
			curr_configs.setDataFile(data_file);
			save_configs();
		}else {
			//Upload the data file
			extractor.show_data_file();
		}
	}
	
	private void save_configs() {
		try {
			mapper.writerWithDefaultPrettyPrinter().writeValue(conf_file, curr_configs);
			
		} catch(IOException e) {
			System.out.println(e.getMessage());
		}
	}
}
